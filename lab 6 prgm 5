#include <stdio.h>
#include <stdbool.h>

#define MAX 10
#define RESOURCE_TYPES 3

bool isSafe(int processes[], int m, int n, int allocation[][RESOURCE_TYPES], int max[][RESOURCE_TYPES], int available[], int need[][RESOURCE_TYPES]) {
    int work[RESOURCE_TYPES], finish[m];
    for (int i = 0; i < RESOURCE_TYPES; i++) {
        work[i] = available[i];
    }

    for (int i = 0; i < m; i++) {
        finish[i] = 0;
    }

    int count = 0;
    while (count < m) {
        bool found = false;
        for (int p = 0; p < m; p++) {
            if (finish[p] == 0) {
                int j;
                for (j = 0; j < RESOURCE_TYPES; j++) {
                    if (need[p][j] > work[j]) {
                        break;
                    }
                }
                if (j == RESOURCE_TYPES) {
                    for (int k = 0; k < RESOURCE_TYPES; k++) {
                        work[k] += allocation[p][k];
                    }
                    finish[p] = 1;
                    found = true;
                    count++;
                }
            }
        }
        if (found == false) {
            return false; // No process could proceed, thus unsafe state
        }
    }
    return true; // All processes can finish, thus safe state
}

void bankersAlgorithm(int processes[], int m, int n, int allocation[][RESOURCE_TYPES], int max[][RESOURCE_TYPES], int available[]) {
    int need[m][RESOURCE_TYPES];
    // Calculate the need matrix
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < RESOURCE_TYPES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    if (isSafe(processes, m, n, allocation, max, available, need)) {
        printf("\nThe system is in a SAFE state.\n");
    } else {
        printf("\nThe system is in an UNSAFE state.\n");
    }
}

bool requestResources(int process, int request[], int m, int n, int allocation[][RESOURCE_TYPES], int max[][RESOURCE_TYPES], int available[]) {
    // Check if the request is less than or equal to the need
    for (int i = 0; i < RESOURCE_TYPES; i++) {
        if (request[i] > (max[process][i] - allocation[process][i])) {
            printf("Error: Process has exceeded maximum claim.\n");
            return false;
        }
    }

    for (int i = 0; i < RESOURCE_TYPES; i++) {
        if (request[i] > available[i]) {
            printf("Resources are not available.\n");
            return false;
        }
    }

    for (int i = 0; i < RESOURCE_TYPES; i++) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
    }

    int need[m][RESOURCE_TYPES];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < RESOURCE_TYPES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    if (isSafe(processes, m, n, allocation, max, available, need)) {
        printf("Resources allocated successfully.\n");
        return true;
    } else {
        for (int i = 0; i < RESOURCE_TYPES; i++) {
            available[i] += request[i];
            allocation[process][i] -= request[i];
        }
        printf("Request cannot be granted as it would lead to an unsafe state.\n");
        return false;
    }
}

int main() {
    int m, n; // m: number of processes, n: number of resource types
    printf("Enter the number of processes: ");
    scanf("%d", &m);
    printf("Enter the number of resource types: ");
    scanf("%d", &n);

    int processes[m];
    for (int i = 0; i < m; i++) {
        processes[i] = i;
    }

    int allocation[m][RESOURCE_TYPES], max[m][RESOURCE_TYPES], available[RESOURCE_TYPES];
    
    printf("\nEnter the allocation matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < RESOURCE_TYPES; j++) {
            printf("Process %d, Resource type %d: ", i + 1, j + 1);
            scanf("%d", &allocation[i][j]);
        }
    }

    printf("\nEnter the max matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < RESOURCE_TYPES; j++) {
            printf("Process %d, Resource type %d: ", i + 1, j + 1);
            scanf("%d", &max[i][j]);
        }
    }

    printf("\nEnter the available resources for each type:\n");
    for (int i = 0; i < RESOURCE_TYPES; i++) {
        printf("Resource type %d: ", i + 1);
        scanf("%d", &available[i]);
    }

    bankersAlgorithm(processes, m, n, allocation, max, available);

    int processNum, request[RESOURCE_TYPES];
    printf("\nEnter the process number to request resources (0 to %d): ", m - 1);
    scanf("%d", &processNum);
    printf("Enter the request for each resource type:\n");
    for (int i = 0; i < RESOURCE_TYPES; i++) {
        printf("Resource type %d: ", i + 1);
        scanf("%d", &request[i]);
    }

    requestResources(processNum, request, m, n, allocation, max, available);

    return 0;
}
